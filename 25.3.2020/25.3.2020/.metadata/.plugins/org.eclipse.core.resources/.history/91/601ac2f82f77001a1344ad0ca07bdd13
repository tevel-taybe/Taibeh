#include <satellite-subsystems/IsisSolarPanelv2.h>
#include <hal/errors.h>

#include <string.h>
#include <stdio.h>

#include "EPS.h"

#ifdef ISISEPS
	#include <satellite-subsystems/isis_eps_driver.h>
#endif
#ifdef GOMEPS
	#include <satellite-subsystems/GomEPS.h>
#endif

// y[i] = a * x[i] +(1-a) * y[i-1]
voltage_t prev_avg = 0;		// y[i-1]
float alpha = 0;			//<! smoothing constant

voltage_t eps_threshold_voltages[NUMBER_OF_THRESHOLD_VOLTAGES];	// saves the current EPS logic threshold voltages
//done
int GetBatteryVoltage(voltage_t *vbatt)
{
	isis_eps__error_t err;
	isis_eps__gethousekeepingengincdb__from_t response;

	//get house keeping data
	err =  isis_eps__gethousekeepingrawincdb__tm(EPS_I2C_BUS_INDEX, &response);
	*vbatt = response.fields.batt_input.fields.volt;
	if(err != isis_eps__error__none)
	    return -1;
	else
		return 0;
}
//done
int EPS_Init()
{
	//a*******************************************************************************************************
    int err;
    isis_eps__error_t init_err;
    IsisSolarPanelv2_State_t solar_err;
    ISIS_EPS_t eps_addr[1];
    eps_addr[0].i2cAddr = EPS_I2C_ADDR;

	init_err = ISIS_EPS_Init(eps_addr, 1);
	//b*******************************************************************************************************
	if (init_err != isis_eps__error__none)
		return -1;
	//c*******************************************************************************************************
	solar_err = IsisSolarPanelv2_initialize( slave0_spi);
	//d*******************************************************************************************************
	if (solar_err == ISIS_SOLAR_PANEL_STATE_NOINIT)
			return -2;
	//loss batt
	solar_err = IsisSolarPanelv2_sleep();
	if (solar_err == ISIS_SOLAR_PANEL_STATE_NOINIT)
			return -2;
	//e*******************************************************************************************************

	RestoreDefaultAlpha();
	RestoreDefaultThresholdVoltages();

	err=GetThresholdVoltages(eps_threshold_voltages);
	if (0!=err)
	{
		voltage_t temp[]=DEFAULT_EPS_THRESHOLD_VOLTAGES ;
		memcpy(eps_threshold_voltages,temp,sizeof(temp));
		return -3;
	}
	err=GetAlpha(&alpha);
	if (0!=err)
	{
		alpha=DEFAULT_ALPHA_VALUE;
		return -4;
	}
    GetBatteryVoltage(&prev_avg);
    EPS_Conditioning();
    return 0;
}

int EPS_Conditioning()
{
	voltage_t curV = 0;
	GetBatteryVoltage(&curV);
	GetAlpha(&alpha);
	curV = alpha * curV + (1 - alpha) * prev_avg;

	printf("The current voltage: %u\n",&curV);

	if(curV > prev_avg) // UP is the best Pixar movie
	{
		if(curV > eps_threshold_voltages[INDEX_UP_FULL])
		{
			printf("you FULL! you fell into my trap!\n");
			return EnterFullMode();
		}
		else if(curV > eps_threshold_voltages[INDEX_UP_CRUISE])
		{
			printf("Wii cruisin'!\n");
			return EnterCruiseMode();
		}
		else if(curV > eps_threshold_voltages[INDEX_UP_SAFE])
		{
			printf("It's not SAFE to go alone! Take this with you!\n");
			return EnterSafeMode();
		}
	}
	else // !UP is the best Pixar movie
	{
		if(curV < eps_threshold_voltages[INDEX_DOWN_SAFE])
		{
			printf("CRITICAL hit! It's super effective!\n");
			return EnterCriticalMode();
		}
		else if(curV < eps_threshold_voltages[INDEX_DOWN_CRUISE])
		{
			printf("It's not SAFE to go alone in the tall grass...\n");
			return EnterSafeMode();
		}
		else if(curV < eps_threshold_voltages[INDEX_DOWN_FULL])
		{
			printf("I'm FULL of piss and vinegar.\n");
			return EnterFullMode();
		}
	}

	prev_avg = curV;

	return 0;
}

int UpdateAlpha(float new_alpha)
{


	if(new_alpha < 0)
		return -2;

	if(FRAM_write(&new_alpha,EPS_ALPHA_FILTER_VALUE_ADDR,EPS_ALPHA_FILTER_VALUE_SIZE) != 0)
		return -1;

	return 0;
}

int UpdateThresholdVoltages(EpsThreshVolt_t thresh_volts[NUMBER_OF_THRESHOLD_VOLTAGES])
{


	if(FRAM_write(thresh_volts,EPS_THRESH_VOLTAGES_ADDR,EPS_THRESH_VOLTAGES_SIZE) != 0)
		return -1;


	//******done by diana*****
	//eps_threshold_voltages
	return 0;
}

int GetThresholdVoltages(EpsThreshVolt_t thresh_volts[NUMBER_OF_THRESHOLD_VOLTAGES])
{
	if(FRAM_read(thresh_volts,EPS_THRESH_VOLTAGES_ADDR,EPS_THRESH_VOLTAGES_SIZE) != 0)
	{
		return -1;
	}
	return 0;
}

int GetAlpha(float *alpha)
{

	if(FRAM_read(alpha,EPS_ALPHA_FILTER_VALUE_ADDR,EPS_ALPHA_FILTER_VALUE_SIZE) != 0)
			return -1;

	return 0;

	int an =0;

	an = FRAM_read((unsigned char *)&alpha,EPS_ALPHA_FILTER_VALUE_ADDR,sizeof(EPS_ALPHA_FILTER_VALUE_SIZE));

	if (an==0 )
	{

	}

	else
		if (an ==-1)
		{
          an=-2;
		}

		else
			if (an==-2)
			{
				an=-1;
			}

	return an;
}

int RestoreDefaultAlpha()
{
	alpha = DEFAULT_ALPHA_VALUE;

	if(FRAM_write(&alpha, EPS_ALPHA_FILTER_VALUE_ADDR,EPS_ALPHA_FILTER_VALUE_SIZE) != 0)
		return -1;

	return 0;
}


int RestoreDefaultThresholdVoltages()
{

	voltage_t defs[NUMBER_OF_THRESHOLD_VOLTAGES] = DEFAULT_EPS_THRESHOLD_VOLTAGES;

	if(FRAM_write(&defs,EPS_THRESH_VOLTAGES_ADDR,EPS_THRESH_VOLTAGES_SIZE) != 0)
		return -1;

	memcpy(eps_threshold_voltages, defs, EPS_THRESH_VOLTAGES_SIZE);

	return 0;
}

