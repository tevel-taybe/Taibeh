#include <satellite-subsystems/IsisAntS.h>


#include "SubSystemModules/Communication/SubsystemCommands/TRXVU_Commands.h"
#include "SubSystemModules/Communication/SubsystemCommands/Maintanence_Commands.h"
#include "SubSystemModules/Communication/SubsystemCommands/FS_Commands.h"
#include "SubSystemModules/Communication/SubsystemCommands/EPS_Commands.h"

#include "SubSystemModules/Housekepping/TelemetryCollector.h"
#include "SubSystemModules/PowerManagment/EPS.h"
#include "TLM_management.h"
#include <stdio.h>
#include "CommandDictionary.h"

int trxvu_command_router(sat_packet_t *cmd)
{
	int ret = 0;

	if(cmd->cmd_subtype == BEACON_SUBTYPE)
	{
		BeaconLogic();
	}
	else if(cmd->cmd_subtype == MUTE_TRXVU)
	{
		muteTRXVU(cmd->data);
	}
	else if(cmd->cmd_subtype == UNMUTE_TRXVU)
	{
		UnMuteTRXVU();
	}
	else if(cmd->cmd_subtype == DUMP_SUBTYPE)
	{
		DumpTelemetry(cmd);
	}
	else if(cmd->cmd_subtype == ABORT_DUMP_SUBTYPE)
	{
		AbortDump();
	}
	else if(cmd->cmd_subtype == GET_BAUD_RATE)
	{

	}
	else if(cmd->cmd_subtype == GET_BEACON_INTERVAL)
	{
		//dont know
	}
	else if(cmd->cmd_subtype == SET_BEACON_INTERVAL)
	{
		UpdateBeaconInterval(cmd->data);
	}
	else if(cmd->cmd_subtype == SET_BAUD_RATE)
	{
		UpdateBeaconBaudCycle(cmd->data);
	}
	else if(cmd->cmd_subtype == ADD_DELAYED_COMMAND_CMD)
	{
		AddDelayedCommand(cmd);
	}
	else if(cmd->cmd_subtype == GET_NUM_OF_DELAYED_CMD)
	{
		ret = GetDelayedCommandBufferCount();
	}
	else if(cmd->cmd_subtype == DELETE_DELAYED_CMD)
	{
		DeleteDelayedCommandByIndex(cmd->data);
	}
	else if(cmd->cmd_subtype == DELETE_ALL_DELAYED_CMD)
	{
		DeleteDelayedBuffer();
	}
	else if(cmd->cmd_subtype == GET_NUM_OF_ONLINE_CMD)
	{
		ret = GetOnlineCommand(cmd);
	}
	return ret;
}

int eps_command_router(sat_packet_t *cmd)
{
	if(cmd->cmd_subtype == a)
	{

	}
	else //b
	{

	}
	return 0;
}

int telemetry_command_router(sat_packet_t *cmd)
{
	int ret = 0;
	if(cmd->cmd_subtype == SOFT_RESET_SUBTYPE)
	{
		//pass
	}
	else if(cmd->cmd_subtype == HARD_RESET_SUBTYPE)
	{
		//pass
	}
	else if(cmd->cmd_subtype == TRXVU_SOFT_RESET_SUBTYPE || cmd->cmd_subtype == TRXVU_HARD_RESET_SUBTYPE)
	{
		InitTrxvu();
	}
	else if(cmd->cmd_subtype == EPS_RESET_SUBTYPE)
	{
		ret = EPS_Init();
	}
	else if(cmd->cmd_subtype == FS_RESET_SUBTYPE)
	{
		InitializeFS();
	}
	return ret;
}

int managment_command_router(sat_packet_t *cmd)
{
	return 0;
}

int filesystem_command_router(sat_packet_t *cmd)
{
	return 0;
}
